<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>キングダム乱 争覇戦 作戦ボード</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #f8f8f8;
        }
        #board-container {
            width: 100vw;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        #board {
            width: 3000px;
            height: 2000px;
            background-color: #ffffff;
            border: 5px solid black; /* 黒枠を追加 */
            position: absolute;
            transform-origin: 0 0;
        }
        .castle {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            position: absolute;
            cursor: grab;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            border: 2px solid black;
            user-select: none;
        }
        .castle[data-pt="1000"] { background-color: blue; }
        .castle[data-pt="1600"] { background-color: green; }
        .castle[data-pt="2700"] { background-color: red; }
        #controls {
            position: fixed;
            top: 10px;
            left: 10px;
            background: rgba(255, 255, 255, 0.9);
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
        }
    </style>
</head>
<body>
    <div id="controls">
        <button onclick="setCastleType(1000)">1000pt 城</button>
        <button onclick="setCastleType(1600)">1600pt 城</button>
        <button onclick="setCastleType(2700)">2700pt 城</button>
    </div>
    <div id="board-container">
        <div id="board"></div>
    </div>
    <script>
        let scale = 1;
        let selectedCastleType = 1000;
        const board = document.getElementById("board");

        function setCastleType(pt) {
            selectedCastleType = pt;
        }

        document.addEventListener("wheel", (event) => {
            event.preventDefault();
            const zoomIntensity = 0.05; // ズームの速度を調整
            scale += event.deltaY * -zoomIntensity;
            scale = Math.min(Math.max(0.75, scale), 1.5);
            board.style.transform = `scale(${scale})`;
        });

        document.addEventListener("mousedown", (event) => {
            if (event.button === 1) {
                event.preventDefault();
            }
        });

        board.addEventListener("dblclick", (event) => {
            const castle = document.createElement("div");
            castle.className = "castle";
            castle.dataset.pt = selectedCastleType;
            castle.style.left = `${event.clientX - 20}px`;
            castle.style.top = `${event.clientY - 20}px`;
            castle.innerText = selectedCastleType;
            castle.draggable = true;

            castle.addEventListener("mousedown", (e) => {
                const offsetX = e.clientX - castle.offsetLeft;
                const offsetY = e.clientY - castle.offsetTop;
                function moveAt(pageX, pageY) {
                    castle.style.left = `${pageX - offsetX}px`;
                    castle.style.top = `${pageY - offsetY}px`;
                }
                function onMouseMove(event) {
                    moveAt(event.pageX, event.pageY);
                }
                document.addEventListener("mousemove", onMouseMove);
                document.addEventListener("mouseup", () => {
                    document.removeEventListener("mousemove", onMouseMove);
                }, { once: true });
            });

            castle.addEventListener("contextmenu", (e) => {
                e.preventDefault();
                board.removeChild(castle);
            });
            board.appendChild(castle);
        });
    </script>
</body>
</html>
